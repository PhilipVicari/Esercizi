"""
def print_seq(): 
    
    print("Sequenza a):")
    numeri= [1,2,3,4,5,6,7]
    for a in numeri:
        print(a)
    print()
    print("Sequenza b):")
    numeri= [3, 8, 13, 18, 23]
    for b in numeri:
        print(b)
    print()

    print("Sequenza c):")
    numeri= [20, 14, 8, 2, -4, -10]
    for c in numeri:
        print(c)
    print()

    print("Sequenza d):")
    numeri= [19, 27, 35, 43, 51]
    for d in numeri:
        print(d)
    print()
    
    return a,b,c,d
sequenza = print_seq()

def Integer_Power(base: int, esponente: int):
    if esponente <= 0:
        print("Non Ã¨ possibile")
    else:
        result = base**esponente
        return result
Numero= Integer_Power(2, 3)
print(Numero)


def calcola_stipendio(ore_lavorate: int) -> float:
    if ore_lavorate <= 40:
        stipendio_lordo= ore_lavorate * 10
        return stipendio_lordo
    else:
        stipendio_lordo= ore_lavorate * 15
        return stipendio_lordo
stipendio=calcola_stipendio(37)
print(stipendio)



def hypoteneuse(x: float, y:float)-> float:
    a= x**2
    b= y**2
    somma= a+b
    ipotenusa= somma * 0.5
    return ipotenusa
ipotenusa=hypoteneuse(2,2)
print(ipotenusa)

def check_parentheses(expression: str) -> bool:
    par_aperta=0
    par_chiusa=0
    for par in expression:
        if par == "(":
            par_aperta+= 1
        if par ==")":
            par_chiusa+= 1
    if par_aperta==par_chiusa:
        return True
    else: 
        return False
espressione=check_parentheses("((((()))))")
print(espressione)
"""

"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
from abc import ABC, abstractmethod
class Shape(ABC):
    def __init__(self) -> None:
        super().__init__()
    @abstractmethod
    def area(self):
        pass
    def perimeter(self):
        pass
class Circle(Shape):
    def __init__(self, raggio, pigreco= 3.14) -> None:
        super().__init__()
        self.raggio= raggio
        self.pigreco= pigreco
        
    def area(self):
        return self.pigreco * self.raggio**2
    
    def perimeter(self):
        return self.raggio *(2*self.pigreco)
    
class Rectangle(Shape):
    def __init__(self, base, altezza) -> None:
        super().__init__()
        self.base= base
        self.altezza= altezza
        
    def area(self):
        return self.base * self.altezza
    
    def perimeter(self):
        return (self.base + self.altezza)*2

rettangolo = Rectangle(base=5, altezza=5)
print(f"Perimetro del rettangolo: {rettangolo.perimeter()}")

cerchio = Circle(raggio=5)
print(f"Circonferenza del cerchio: {cerchio.perimeter()}")

rettangolo = Rectangle(base=5, altezza=5)
print(f"area del rettangolo: {rettangolo.area()}")

cerchio = Circle(raggio=5)
print(f"area del cerchio: {cerchio.area()}")